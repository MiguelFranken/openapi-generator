/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Logger } from "@upe/logger";
import { HttpClient, HttpHeaders, HttpParams, HttpErrorResponse,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable, throwError, Subject } from 'rxjs';
import { plainToClassFromExist } from "class-transformer";
import { catchError, map, concatMap } from "rxjs/operators";

import { User } from '../model/models';

import { BASE_PATH, COLLECTION_FORMATS, HttpImage, IRequestOptions, IRequestOptionsWithResponseType }          from '../variables';
import { Configuration }                                     from '../configuration';

interface LogRequest {
    url: string;
    params?: HttpParams;
    body?: any;
    headers?: HttpHeaders;
}

interface BlobOptions {
    params?: HttpParams | {
        [param: string]: string | string[];
    };
    responseType: "json"; // "blob" as "json"
}


/**
 * @property { User } body - Created user object
 */
export interface CreateUserRequestParams {
    /** Created user object */
    body: User;
}

/**
 * @property { Array<User> } body - List of user object
 */
export interface CreateUsersWithArrayInputRequestParams {
    /** List of user object */
    body: Array<User>;
}

/**
 * @property { Array<User> } body - List of user object
 */
export interface CreateUsersWithListInputRequestParams {
    /** List of user object */
    body: Array<User>;
}

/**
 * @property { string } username - The name that needs to be deleted
 */
export interface DeleteUserRequestParams {
    /** The name that needs to be deleted */
    username: string;
}

/**
 * @property { string } username - The name that needs to be fetched. Use user1 for testing.
 */
export interface GetUserByNameRequestParams {
    /** The name that needs to be fetched. Use user1 for testing. */
    username: string;
}

/**
 * @property { string } username - The user name for login
 * @property { string } password - The password for login in clear text
 */
export interface LoginUserRequestParams {
    /** The user name for login */
    username: string;
    /** The password for login in clear text */
    password: string;
}

/**
 * @property { string } username - name that need to be deleted
 * @property { User } body - Updated user object
 */
export interface UpdateUserRequestParams {
    /** name that need to be deleted */
    username: string;
    /** Updated user object */
    body: User;
}


/**
  * Operations about user
  
  */
@Injectable({
  providedIn: 'root'
})
export class UserService {

    protected basePath = 'http://petstore.swagger.io/v2';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    private logger: Logger = new Logger({ name: "UserService", flags: ["service"] });

    /**
     * Executed when an HTTP error occurred
     */
    private getErrorCallback(request: LogRequest) {
        return (fullHttpErrorResponse: HttpErrorResponse) => {
            const errorDto = fullHttpErrorResponse.error;
            this.logger.error("Error occurred", {
                request,
                error: errorDto
            });
            return throwError(errorDto);
        };
    }

    /**
    * Transforms asynchronously a blob into an image using the file reader
    */
    private createImageFromBlob(image: Blob): Observable<HttpImage> {
        const reader = new FileReader();
        if (image) {
            reader.readAsDataURL(image);
        }
        const subject = new Subject<string | ArrayBuffer>();
        reader.addEventListener("load", () => {
            subject.next(reader.result);
        }, false);
        return subject.asObservable();
    }

    constructor(
      protected httpClient: HttpClient,
      @Optional()@Inject(BASE_PATH) basePath: string,
      @Optional() configuration: Configuration
    ) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key,
                        (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
  * Create user
  * <p></p>
  * <p></p>
  * This can only be done by the logged in user.
  * <p></p>
  * <p></p>
  * <b>Example Response:</b><br>
  * <p></p>
  * <p><b>Possible HTTP Response Statuses:</b>
  * <br>- 0 (successful operation)
  * <p></p>
  * @param requestParameters {@link CreateUserRequestParams}
  * @param requestOptions Optional request options
  */

    public createUser(requestParameters: CreateUserRequestParams, requestOptions?: IRequestOptions): Observable<any>
    /**
  * Create user
  * <p></p>
  * <p></p>
  * This can only be done by the logged in user.
  * <p></p>
  * <p></p>
  * <b>Example Response:</b><br>
  * <p></p>
  * <p><b>Possible HTTP Response Statuses:</b>
  * <br>- 0 (successful operation)
  * <p></p>
  * @param requestParameters {@link CreateUserRequestParams}
  * @param requestOptions Optional request options
  */

    public createUser<T>(requestParameters: CreateUserRequestParams, requestOptions?: IRequestOptionsWithResponseType<T>): Observable<T>
    public createUser<T>(requestParameters: CreateUserRequestParams, requestOptions?: any): Observable<any> {
        if (!!requestOptions && !!requestOptions.debugging) {
            if (!!requestOptions.responseType) {
                this.logger.debug("Using extended DTO for deserialization");
            } else {
                this.logger.debug("No handwritten DTO extension was registered");
            }
            this.logger.debug("Sending request createUser with parameters", requestParameters);
        }

        const body = requestParameters.body;
        if (body === null || body === undefined) {
            this.logger.error('Required parameter body was null or undefined when calling createUser.');
            throw new Error('Required parameter body was null or undefined when calling createUser.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected  = this.configuration.selectHeaderAccept(httpHeaderAccepts);

        let acceptString = "application/json";
        if (httpHeaderAccepts.length > 0) {
            acceptString = httpHeaderAccepts.join(", ");
            if (httpHeaderAccepts.find((acceptString: string) => acceptString.includes("json")) === undefined) {
                acceptString += ", application/json";
            }
        }
        headers = headers.set('Accept', acceptString);

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        if(acceptString.includes('image')) {
            responseType = "blob" as "json";
        }


        const httpOptions: any = {
            responseType: <any>responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: (!!requestOptions && !!requestOptions.observe) ? requestOptions.observe : "body"
        };

        const requestPath = `${this.configuration.basePath}/user`;

        const logRequest: LogRequest = {
            url: requestPath,
            body: body,
            headers
        };

        if (acceptString.includes('image')) {
            return this.httpClient.get<Blob>(requestPath, httpOptions as BlobOptions).pipe(
                concatMap(result => {
                    return this.createImageFromBlob(result);
                }),
                catchError(this.getErrorCallback(logRequest).bind(this))
            );
        } else if (!!requestOptions && !!requestOptions.responseType) {
            const responseObservable = this.httpClient.post<any>(requestPath ,body,httpOptions).pipe(
                map(response => plainToClassFromExist(new requestOptions.responseType(), response)),
                catchError(this.getErrorCallback(logRequest).bind(this))
            );
            return responseObservable;
        } else {
            return this.httpClient.post<any>(requestPath, 
            body,
                httpOptions
            ).pipe(
                catchError(this.getErrorCallback(logRequest).bind(this))
            );
        }
  }

    /**
  * Creates list of users with given input array
  * <p></p>
  * <p></p>
  * <b>Example Response:</b><br>
  * <p></p>
  * <p><b>Possible HTTP Response Statuses:</b>
  * <br>- 0 (successful operation)
  * <p></p>
  * @param requestParameters {@link CreateUsersWithArrayInputRequestParams}
  * @param requestOptions Optional request options
  */

    public createUsersWithArrayInput(requestParameters: CreateUsersWithArrayInputRequestParams, requestOptions?: IRequestOptions): Observable<any>
    /**
  * Creates list of users with given input array
  * <p></p>
  * <p></p>
  * <b>Example Response:</b><br>
  * <p></p>
  * <p><b>Possible HTTP Response Statuses:</b>
  * <br>- 0 (successful operation)
  * <p></p>
  * @param requestParameters {@link CreateUsersWithArrayInputRequestParams}
  * @param requestOptions Optional request options
  */

    public createUsersWithArrayInput<T>(requestParameters: CreateUsersWithArrayInputRequestParams, requestOptions?: IRequestOptionsWithResponseType<T>): Observable<T>
    public createUsersWithArrayInput<T>(requestParameters: CreateUsersWithArrayInputRequestParams, requestOptions?: any): Observable<any> {
        if (!!requestOptions && !!requestOptions.debugging) {
            if (!!requestOptions.responseType) {
                this.logger.debug("Using extended DTO for deserialization");
            } else {
                this.logger.debug("No handwritten DTO extension was registered");
            }
            this.logger.debug("Sending request createUsersWithArrayInput with parameters", requestParameters);
        }

        const body = requestParameters.body;
        if (body === null || body === undefined) {
            this.logger.error('Required parameter body was null or undefined when calling createUsersWithArrayInput.');
            throw new Error('Required parameter body was null or undefined when calling createUsersWithArrayInput.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected  = this.configuration.selectHeaderAccept(httpHeaderAccepts);

        let acceptString = "application/json";
        if (httpHeaderAccepts.length > 0) {
            acceptString = httpHeaderAccepts.join(", ");
            if (httpHeaderAccepts.find((acceptString: string) => acceptString.includes("json")) === undefined) {
                acceptString += ", application/json";
            }
        }
        headers = headers.set('Accept', acceptString);

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        if(acceptString.includes('image')) {
            responseType = "blob" as "json";
        }


        const httpOptions: any = {
            responseType: <any>responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: (!!requestOptions && !!requestOptions.observe) ? requestOptions.observe : "body"
        };

        const requestPath = `${this.configuration.basePath}/user/createWithArray`;

        const logRequest: LogRequest = {
            url: requestPath,
            body: body,
            headers
        };

        if (acceptString.includes('image')) {
            return this.httpClient.get<Blob>(requestPath, httpOptions as BlobOptions).pipe(
                concatMap(result => {
                    return this.createImageFromBlob(result);
                }),
                catchError(this.getErrorCallback(logRequest).bind(this))
            );
        } else if (!!requestOptions && !!requestOptions.responseType) {
            const responseObservable = this.httpClient.post<any>(requestPath ,body,httpOptions).pipe(
                map(response => plainToClassFromExist(new requestOptions.responseType(), response)),
                catchError(this.getErrorCallback(logRequest).bind(this))
            );
            return responseObservable;
        } else {
            return this.httpClient.post<any>(requestPath, 
            body,
                httpOptions
            ).pipe(
                catchError(this.getErrorCallback(logRequest).bind(this))
            );
        }
  }

    /**
  * Creates list of users with given input array
  * <p></p>
  * <p></p>
  * <b>Example Response:</b><br>
  * <p></p>
  * <p><b>Possible HTTP Response Statuses:</b>
  * <br>- 0 (successful operation)
  * <p></p>
  * @param requestParameters {@link CreateUsersWithListInputRequestParams}
  * @param requestOptions Optional request options
  */

    public createUsersWithListInput(requestParameters: CreateUsersWithListInputRequestParams, requestOptions?: IRequestOptions): Observable<any>
    /**
  * Creates list of users with given input array
  * <p></p>
  * <p></p>
  * <b>Example Response:</b><br>
  * <p></p>
  * <p><b>Possible HTTP Response Statuses:</b>
  * <br>- 0 (successful operation)
  * <p></p>
  * @param requestParameters {@link CreateUsersWithListInputRequestParams}
  * @param requestOptions Optional request options
  */

    public createUsersWithListInput<T>(requestParameters: CreateUsersWithListInputRequestParams, requestOptions?: IRequestOptionsWithResponseType<T>): Observable<T>
    public createUsersWithListInput<T>(requestParameters: CreateUsersWithListInputRequestParams, requestOptions?: any): Observable<any> {
        if (!!requestOptions && !!requestOptions.debugging) {
            if (!!requestOptions.responseType) {
                this.logger.debug("Using extended DTO for deserialization");
            } else {
                this.logger.debug("No handwritten DTO extension was registered");
            }
            this.logger.debug("Sending request createUsersWithListInput with parameters", requestParameters);
        }

        const body = requestParameters.body;
        if (body === null || body === undefined) {
            this.logger.error('Required parameter body was null or undefined when calling createUsersWithListInput.');
            throw new Error('Required parameter body was null or undefined when calling createUsersWithListInput.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected  = this.configuration.selectHeaderAccept(httpHeaderAccepts);

        let acceptString = "application/json";
        if (httpHeaderAccepts.length > 0) {
            acceptString = httpHeaderAccepts.join(", ");
            if (httpHeaderAccepts.find((acceptString: string) => acceptString.includes("json")) === undefined) {
                acceptString += ", application/json";
            }
        }
        headers = headers.set('Accept', acceptString);

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        if(acceptString.includes('image')) {
            responseType = "blob" as "json";
        }


        const httpOptions: any = {
            responseType: <any>responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: (!!requestOptions && !!requestOptions.observe) ? requestOptions.observe : "body"
        };

        const requestPath = `${this.configuration.basePath}/user/createWithList`;

        const logRequest: LogRequest = {
            url: requestPath,
            body: body,
            headers
        };

        if (acceptString.includes('image')) {
            return this.httpClient.get<Blob>(requestPath, httpOptions as BlobOptions).pipe(
                concatMap(result => {
                    return this.createImageFromBlob(result);
                }),
                catchError(this.getErrorCallback(logRequest).bind(this))
            );
        } else if (!!requestOptions && !!requestOptions.responseType) {
            const responseObservable = this.httpClient.post<any>(requestPath ,body,httpOptions).pipe(
                map(response => plainToClassFromExist(new requestOptions.responseType(), response)),
                catchError(this.getErrorCallback(logRequest).bind(this))
            );
            return responseObservable;
        } else {
            return this.httpClient.post<any>(requestPath, 
            body,
                httpOptions
            ).pipe(
                catchError(this.getErrorCallback(logRequest).bind(this))
            );
        }
  }

    /**
  * Delete user
  * <p></p>
  * <p></p>
  * This can only be done by the logged in user.
  * <p></p>
  * <p></p>
  * <b>Example Response:</b><br>
  * <p></p>
  * <p><b>Possible HTTP Response Statuses:</b>
  * <br>- 400 (Invalid username supplied)<br>- 404 (User not found)
  * <p></p>
  * @param requestParameters {@link DeleteUserRequestParams}
  * @param requestOptions Optional request options
  */

    public deleteUser(requestParameters: DeleteUserRequestParams, requestOptions?: IRequestOptions): Observable<any>
    /**
  * Delete user
  * <p></p>
  * <p></p>
  * This can only be done by the logged in user.
  * <p></p>
  * <p></p>
  * <b>Example Response:</b><br>
  * <p></p>
  * <p><b>Possible HTTP Response Statuses:</b>
  * <br>- 400 (Invalid username supplied)<br>- 404 (User not found)
  * <p></p>
  * @param requestParameters {@link DeleteUserRequestParams}
  * @param requestOptions Optional request options
  */

    public deleteUser<T>(requestParameters: DeleteUserRequestParams, requestOptions?: IRequestOptionsWithResponseType<T>): Observable<T>
    public deleteUser<T>(requestParameters: DeleteUserRequestParams, requestOptions?: any): Observable<any> {
        if (!!requestOptions && !!requestOptions.debugging) {
            if (!!requestOptions.responseType) {
                this.logger.debug("Using extended DTO for deserialization");
            } else {
                this.logger.debug("No handwritten DTO extension was registered");
            }
            this.logger.debug("Sending request deleteUser with parameters", requestParameters);
        }

        const username = requestParameters.username;
        if (username === null || username === undefined) {
            this.logger.error('Required parameter username was null or undefined when calling deleteUser.');
            throw new Error('Required parameter username was null or undefined when calling deleteUser.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected  = this.configuration.selectHeaderAccept(httpHeaderAccepts);

        let acceptString = "application/json";
        if (httpHeaderAccepts.length > 0) {
            acceptString = httpHeaderAccepts.join(", ");
            if (httpHeaderAccepts.find((acceptString: string) => acceptString.includes("json")) === undefined) {
                acceptString += ", application/json";
            }
        }
        headers = headers.set('Accept', acceptString);


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        if(acceptString.includes('image')) {
            responseType = "blob" as "json";
        }


        const httpOptions: any = {
            responseType: <any>responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: (!!requestOptions && !!requestOptions.observe) ? requestOptions.observe : "body"
        };

        const requestPath = `${this.configuration.basePath}/user/${encodeURIComponent(String(username))}`;

        const logRequest: LogRequest = {
            url: requestPath,
            
            headers
        };

        if (acceptString.includes('image')) {
            return this.httpClient.get<Blob>(requestPath, httpOptions as BlobOptions).pipe(
                concatMap(result => {
                    return this.createImageFromBlob(result);
                }),
                catchError(this.getErrorCallback(logRequest).bind(this))
            );
        } else if (!!requestOptions && !!requestOptions.responseType) {
            const responseObservable = this.httpClient.delete<any>(requestPath ,httpOptions).pipe(
                map(response => plainToClassFromExist(new requestOptions.responseType(), response)),
                catchError(this.getErrorCallback(logRequest).bind(this))
            );
            return responseObservable;
        } else {
            return this.httpClient.delete<any>(requestPath, 
                httpOptions
            ).pipe(
                catchError(this.getErrorCallback(logRequest).bind(this))
            );
        }
  }

    /**
  * Get user by user name
  * <p></p>
  * <p></p>
  * <b>Example Response:</b><br>
  * <pre>
  * {
  "firstName" : "firstName",
  "lastName" : "lastName",
  "password" : "password",
  "userStatus" : 6,
  "phone" : "phone",
  "id" : 0,
  "email" : "email",
  "username" : "username"
}
  * </pre>
  * <p></p>
  * <p><b>Possible HTTP Response Statuses:</b>
  * <br>- 200 (successful operation) with body {@link User}<br>- 400 (Invalid username supplied)<br>- 404 (User not found)
  * <p></p>
  * @param requestParameters {@link GetUserByNameRequestParams}
  * @param requestOptions Optional request options
  */

    public getUserByName(requestParameters: GetUserByNameRequestParams, requestOptions?: IRequestOptions): Observable<User>
    /**
  * Get user by user name
  * <p></p>
  * <p></p>
  * <b>Example Response:</b><br>
  * <pre>
  * {
  "firstName" : "firstName",
  "lastName" : "lastName",
  "password" : "password",
  "userStatus" : 6,
  "phone" : "phone",
  "id" : 0,
  "email" : "email",
  "username" : "username"
}
  * </pre>
  * <p></p>
  * <p><b>Possible HTTP Response Statuses:</b>
  * <br>- 200 (successful operation) with body {@link User}<br>- 400 (Invalid username supplied)<br>- 404 (User not found)
  * <p></p>
  * @param requestParameters {@link GetUserByNameRequestParams}
  * @param requestOptions Optional request options
  */

    public getUserByName<T>(requestParameters: GetUserByNameRequestParams, requestOptions?: IRequestOptionsWithResponseType<T>): Observable<T>
    public getUserByName<T>(requestParameters: GetUserByNameRequestParams, requestOptions?: any): Observable<User> {
        if (!!requestOptions && !!requestOptions.debugging) {
            if (!!requestOptions.responseType) {
                this.logger.debug("Using extended DTO for deserialization");
            } else {
                this.logger.debug("No handwritten DTO extension was registered");
            }
            this.logger.debug("Sending request getUserByName with parameters", requestParameters);
        }

        const username = requestParameters.username;
        if (username === null || username === undefined) {
            this.logger.error('Required parameter username was null or undefined when calling getUserByName.');
            throw new Error('Required parameter username was null or undefined when calling getUserByName.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected  = this.configuration.selectHeaderAccept(httpHeaderAccepts);

        let acceptString = "application/json";
        if (httpHeaderAccepts.length > 0) {
            acceptString = httpHeaderAccepts.join(", ");
            if (httpHeaderAccepts.find((acceptString: string) => acceptString.includes("json")) === undefined) {
                acceptString += ", application/json";
            }
        }
        headers = headers.set('Accept', acceptString);


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        if(acceptString.includes('image')) {
            responseType = "blob" as "json";
        }


        const httpOptions: any = {
            responseType: <any>responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: (!!requestOptions && !!requestOptions.observe) ? requestOptions.observe : "body"
        };

        const requestPath = `${this.configuration.basePath}/user/${encodeURIComponent(String(username))}`;

        const logRequest: LogRequest = {
            url: requestPath,
            
            headers
        };

        if (acceptString.includes('image')) {
            return this.httpClient.get<Blob>(requestPath, httpOptions as BlobOptions).pipe(
                concatMap(result => {
                    return this.createImageFromBlob(result);
                }),
                catchError(this.getErrorCallback(logRequest).bind(this))
            );
        } else if (!!requestOptions && !!requestOptions.responseType) {
            const responseObservable = this.httpClient.get<any>(requestPath ,httpOptions).pipe(
                map(response => plainToClassFromExist(new requestOptions.responseType(), response)),
                catchError(this.getErrorCallback(logRequest).bind(this))
            );
            return responseObservable;
        } else {
            return this.httpClient.get<User>(requestPath, 
                httpOptions
            ).pipe(
                catchError(this.getErrorCallback(logRequest).bind(this))
            );
        }
  }

    /**
  * Logs user into the system
  * <p></p>
  * <p></p>
  * <b>Example Response:</b><br>
  * <p></p>
  * <p><b>Possible HTTP Response Statuses:</b>
  * <br>- 200 (successful operation)<br>- 400 (Invalid username/password supplied)
  * <p></p>
  * @param requestParameters {@link LoginUserRequestParams}
  * @param requestOptions Optional request options
  */

    public loginUser(requestParameters: LoginUserRequestParams, requestOptions?: IRequestOptions): Observable<string>
    /**
  * Logs user into the system
  * <p></p>
  * <p></p>
  * <b>Example Response:</b><br>
  * <p></p>
  * <p><b>Possible HTTP Response Statuses:</b>
  * <br>- 200 (successful operation)<br>- 400 (Invalid username/password supplied)
  * <p></p>
  * @param requestParameters {@link LoginUserRequestParams}
  * @param requestOptions Optional request options
  */

    public loginUser<T>(requestParameters: LoginUserRequestParams, requestOptions?: IRequestOptionsWithResponseType<T>): Observable<T>
    public loginUser<T>(requestParameters: LoginUserRequestParams, requestOptions?: any): Observable<string> {
        if (!!requestOptions && !!requestOptions.debugging) {
            if (!!requestOptions.responseType) {
                this.logger.debug("Using extended DTO for deserialization");
            } else {
                this.logger.debug("No handwritten DTO extension was registered");
            }
            this.logger.debug("Sending request loginUser with parameters", requestParameters);
        }

        const username = requestParameters.username;
        if (username === null || username === undefined) {
            this.logger.error('Required parameter username was null or undefined when calling loginUser.');
            throw new Error('Required parameter username was null or undefined when calling loginUser.');
        }
        const password = requestParameters.password;
        if (password === null || password === undefined) {
            this.logger.error('Required parameter password was null or undefined when calling loginUser.');
            throw new Error('Required parameter password was null or undefined when calling loginUser.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (username !== undefined && username !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>username, 'username');
        }
        if (password !== undefined && password !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>password, 'password');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected  = this.configuration.selectHeaderAccept(httpHeaderAccepts);

        let acceptString = "application/json";
        if (httpHeaderAccepts.length > 0) {
            acceptString = httpHeaderAccepts.join(", ");
            if (httpHeaderAccepts.find((acceptString: string) => acceptString.includes("json")) === undefined) {
                acceptString += ", application/json";
            }
        }
        headers = headers.set('Accept', acceptString);


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        if(acceptString.includes('image')) {
            responseType = "blob" as "json";
        }


        const httpOptions: any = {
            params: queryParameters,
            responseType: <any>responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: (!!requestOptions && !!requestOptions.observe) ? requestOptions.observe : "body"
        };

        const requestPath = `${this.configuration.basePath}/user/login`;

        const logRequest: LogRequest = {
            url: requestPath,
            
            headers
        };

        if (acceptString.includes('image')) {
            return this.httpClient.get<Blob>(requestPath, httpOptions as BlobOptions).pipe(
                concatMap(result => {
                    return this.createImageFromBlob(result);
                }),
                catchError(this.getErrorCallback(logRequest).bind(this))
            );
        } else if (!!requestOptions && !!requestOptions.responseType) {
            const responseObservable = this.httpClient.get<any>(requestPath ,httpOptions).pipe(
                map(response => plainToClassFromExist(new requestOptions.responseType(), response)),
                catchError(this.getErrorCallback(logRequest).bind(this))
            );
            return responseObservable;
        } else {
            return this.httpClient.get<string>(requestPath, 
                httpOptions
            ).pipe(
                catchError(this.getErrorCallback(logRequest).bind(this))
            );
        }
  }

    /**
  * Logs out current logged in user session
  * <p></p>
  * <p></p>
  * <b>Example Response:</b><br>
  * <p></p>
  * <p><b>Possible HTTP Response Statuses:</b>
  * <br>- 0 (successful operation)
  * <p></p>
  * @param requestOptions Optional request options
  */

    public logoutUser(requestOptions?: IRequestOptions): Observable<any>
    /**
  * Logs out current logged in user session
  * <p></p>
  * <p></p>
  * <b>Example Response:</b><br>
  * <p></p>
  * <p><b>Possible HTTP Response Statuses:</b>
  * <br>- 0 (successful operation)
  * <p></p>
  * @param requestOptions Optional request options
  */

    public logoutUser<T>(requestOptions?: IRequestOptionsWithResponseType<T>): Observable<T>
    public logoutUser<T>(requestOptions?: any): Observable<any> {
        if (!!requestOptions && !!requestOptions.debugging) {
            if (!!requestOptions.responseType) {
                this.logger.debug("Using extended DTO for deserialization");
            } else {
                this.logger.debug("No handwritten DTO extension was registered");
            }
            this.logger.debug("Sending request logoutUser");
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected  = this.configuration.selectHeaderAccept(httpHeaderAccepts);

        let acceptString = "application/json";
        if (httpHeaderAccepts.length > 0) {
            acceptString = httpHeaderAccepts.join(", ");
            if (httpHeaderAccepts.find((acceptString: string) => acceptString.includes("json")) === undefined) {
                acceptString += ", application/json";
            }
        }
        headers = headers.set('Accept', acceptString);


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        if(acceptString.includes('image')) {
            responseType = "blob" as "json";
        }


        const httpOptions: any = {
            responseType: <any>responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: (!!requestOptions && !!requestOptions.observe) ? requestOptions.observe : "body"
        };

        const requestPath = `${this.configuration.basePath}/user/logout`;

        const logRequest: LogRequest = {
            url: requestPath,
            
            headers
        };

        if (acceptString.includes('image')) {
            return this.httpClient.get<Blob>(requestPath, httpOptions as BlobOptions).pipe(
                concatMap(result => {
                    return this.createImageFromBlob(result);
                }),
                catchError(this.getErrorCallback(logRequest).bind(this))
            );
        } else if (!!requestOptions && !!requestOptions.responseType) {
            const responseObservable = this.httpClient.get<any>(requestPath ,httpOptions).pipe(
                map(response => plainToClassFromExist(new requestOptions.responseType(), response)),
                catchError(this.getErrorCallback(logRequest).bind(this))
            );
            return responseObservable;
        } else {
            return this.httpClient.get<any>(requestPath, 
                httpOptions
            ).pipe(
                catchError(this.getErrorCallback(logRequest).bind(this))
            );
        }
  }

    /**
  * Updated user
  * <p></p>
  * <p></p>
  * This can only be done by the logged in user.
  * <p></p>
  * <p></p>
  * <b>Example Response:</b><br>
  * <p></p>
  * <p><b>Possible HTTP Response Statuses:</b>
  * <br>- 400 (Invalid user supplied)<br>- 404 (User not found)
  * <p></p>
  * @param requestParameters {@link UpdateUserRequestParams}
  * @param requestOptions Optional request options
  */

    public updateUser(requestParameters: UpdateUserRequestParams, requestOptions?: IRequestOptions): Observable<any>
    /**
  * Updated user
  * <p></p>
  * <p></p>
  * This can only be done by the logged in user.
  * <p></p>
  * <p></p>
  * <b>Example Response:</b><br>
  * <p></p>
  * <p><b>Possible HTTP Response Statuses:</b>
  * <br>- 400 (Invalid user supplied)<br>- 404 (User not found)
  * <p></p>
  * @param requestParameters {@link UpdateUserRequestParams}
  * @param requestOptions Optional request options
  */

    public updateUser<T>(requestParameters: UpdateUserRequestParams, requestOptions?: IRequestOptionsWithResponseType<T>): Observable<T>
    public updateUser<T>(requestParameters: UpdateUserRequestParams, requestOptions?: any): Observable<any> {
        if (!!requestOptions && !!requestOptions.debugging) {
            if (!!requestOptions.responseType) {
                this.logger.debug("Using extended DTO for deserialization");
            } else {
                this.logger.debug("No handwritten DTO extension was registered");
            }
            this.logger.debug("Sending request updateUser with parameters", requestParameters);
        }

        const username = requestParameters.username;
        if (username === null || username === undefined) {
            this.logger.error('Required parameter username was null or undefined when calling updateUser.');
            throw new Error('Required parameter username was null or undefined when calling updateUser.');
        }
        const body = requestParameters.body;
        if (body === null || body === undefined) {
            this.logger.error('Required parameter body was null or undefined when calling updateUser.');
            throw new Error('Required parameter body was null or undefined when calling updateUser.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected  = this.configuration.selectHeaderAccept(httpHeaderAccepts);

        let acceptString = "application/json";
        if (httpHeaderAccepts.length > 0) {
            acceptString = httpHeaderAccepts.join(", ");
            if (httpHeaderAccepts.find((acceptString: string) => acceptString.includes("json")) === undefined) {
                acceptString += ", application/json";
            }
        }
        headers = headers.set('Accept', acceptString);

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        if(acceptString.includes('image')) {
            responseType = "blob" as "json";
        }


        const httpOptions: any = {
            responseType: <any>responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: (!!requestOptions && !!requestOptions.observe) ? requestOptions.observe : "body"
        };

        const requestPath = `${this.configuration.basePath}/user/${encodeURIComponent(String(username))}`;

        const logRequest: LogRequest = {
            url: requestPath,
            body: body,
            headers
        };

        if (acceptString.includes('image')) {
            return this.httpClient.get<Blob>(requestPath, httpOptions as BlobOptions).pipe(
                concatMap(result => {
                    return this.createImageFromBlob(result);
                }),
                catchError(this.getErrorCallback(logRequest).bind(this))
            );
        } else if (!!requestOptions && !!requestOptions.responseType) {
            const responseObservable = this.httpClient.put<any>(requestPath ,body,httpOptions).pipe(
                map(response => plainToClassFromExist(new requestOptions.responseType(), response)),
                catchError(this.getErrorCallback(logRequest).bind(this))
            );
            return responseObservable;
        } else {
            return this.httpClient.put<any>(requestPath, 
            body,
                httpOptions
            ).pipe(
                catchError(this.getErrorCallback(logRequest).bind(this))
            );
        }
  }

}
